close(gzipped_file)
# clean up column names
header <- names(IBD_taxa)
new_header <- gsub("_taxonomic_profile", "", header)
names(IBD_taxa) <- new_header
colnames(IBD_taxa)[1] <- "Sample"
# there are 1339 columns- just checking to ensure no duplicates -- *none found
duplicate_columns <- colnames(IBD_taxa)[duplicated(colnames(IBD_taxa))]
if (length(duplicate_columns) > 0) {
cat("Duplicate column names found:", paste(duplicate_columns, collapse = ", "), "\n")
} else {
cat("No duplicate column names found.\n")
}
# cleaning
IBD_taxa_t <- as.data.frame(t(IBD_taxa))
colnames(IBD_taxa_t) <- unlist(IBD_taxa_t[1, ])
IBD_taxa_t <- IBD_taxa_t[-1, ]
IBD_taxa_t <- cbind("Sample" = rownames(IBD_taxa_t), IBD_taxa_t)
rownames(IBD_taxa_t) <- NULL
# filter the taxonomic data to match the filtered metadata file
filtered_IBD_samples <- unique(IBD_filtered$Sample)
# Filter IBD taxa based on matching sample names
filtered_IBD_age <- IBD_taxa_t %>%
filter(Sample %in% filtered_IBD_samples)
# Extract "Sample" and "diagnosis" and "diagnosis2" columns for later
diagnosis <- IBD_filtered %>% select(Sample, diagnosis, diagnosis2)
filtered_IBD_age <- filtered_IBD_age %>%
column_to_rownames(var = "Sample")
View(filtered_IBD_age)
filtered_IBD_age <- filtered_IBD_age %>%
column_to_rownames(var = "Sample")
library(tidyverse)
filtered_IBD_age <- filtered_IBD_age %>%
column_to_rownames(var = "Sample")
PD <- readRDS("HMP2_Payami/Wallen_count_species.rds")
PD <- readRDS("HMP2_Payami/Wallen_counts_species.rds")
# load packages to perform alpha diversity analysis
library(tidyverse)
library(ggplot2)
library(tidyr)
library(dplyr)
library(RColorBrewer)
# load packages to perform alpha diversity analysis
library(tidyverse)
library(ggplot2)
library(tidyr)
library(dplyr)
library(RColorBrewer)
# reading .tsv file containing taxonomic classification relative abundances
rel_ab <- readRDS("UFPF/Metaphlan output/rel_ab_cleaned.rds")
# filter at the phylum level
rel_ab_phylum <- rel_ab[, grep("\\|p__[^|]*$", colnames(rel_ab))]
colnames(rel_ab_phylum) <- sub("^.*\\|p__", "", colnames(rel_ab_phylum))
# Subset the data by cohort
PD_phylum <- rel_ab_phylum[grep("1N", rownames(rel_ab_phylum)), ]
Control_phylum <- rel_ab_phylum[grep("3N|3G", rownames(rel_ab_phylum)), ]
IBD_phylum <- rel_ab_phylum[grep("2G", rownames(rel_ab_phylum)), ]
PD_phylum_df <- data.frame(Sample = rownames(PD_phylum), PD_phylum)
Control_phylum_df <- data.frame(Sample = rownames(Control_phylum), Control_phylum)
IBD_phylum_df <- data.frame(Sample = rownames(IBD_phylum), IBD_phylum)
phylum_cohorts_df <- rbind(PD_phylum_df, Control_phylum_df, IBD_phylum_df)
# Convert to long format
phylum_cohorts_df_long <- pivot_longer(phylum_cohorts_df,
cols = -Sample,
names_to = "Phylum",
values_to = "Abundance")
# Extract cohort info from Sample column
phylum_cohorts_df_long$Cohort <- ifelse(grepl("1N", phylum_cohorts_df_long$Sample), "PD",
ifelse(grepl("2G", phylum_cohorts_df_long$Sample), "IBD", "Control"))
# Group by cohort and phylum + calculate mean abundance
phylum_cohorts_df_long_mean <- phylum_cohorts_df_long %>%
group_by(Cohort, Phylum) %>%
summarize(mean_abundance = mean(Abundance))
# Define  number of colors needed for each palette
pairedCount <- 8
set3Count <- 12
# Get the colors from the two palettes
pairedColors <- brewer.pal(pairedCount, "Paired")
set3Colors <- brewer.pal(set3Count, "Set3")
allColors <- c(set3Colors, pairedColors)
# Create stacked bar graph with the average cohort abundances
# HERE IT REMOVES ACTINOBACTERA FROM THE PD COHORT *************
ggplot(phylum_cohorts_df_long_mean, aes(x = Cohort, y = mean_abundance, fill = Phylum)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Phylum-level Relative Abundances by Cohort",
x = "Cohort", y = "Relative Abundance (%)",
fill = "Phylum") +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5)) +
theme(
plot.title = element_text(size =20, face = "bold", hjust = 0.5),
legend.text = element_text(size = 14),
axis.title.x = element_text(size = 14, color = "black"),
axis.title.y = element_text(size = 14, color = "black"),
axis.text.y = element_text(size = 12, color = "black"),
axis.text.x = element_text(size = 12, color = "black"),
strip.text = element_text(color = "white", face = "bold", size = rel(1.5)),
strip.background = element_rect(fill = "black", color = "black")) +
scale_fill_manual(values = allColors)
# have samples next to each other left to right
# BUNCH OF WARNING MESSAGES FOR ROWS THAT IT REMOVES ***********
ggplot(phylum_cohorts_df_long, aes(x = Sample, y = Abundance, fill = Phylum)) +
geom_bar(stat = "identity", position = "stack") +
facet_grid(. ~ Cohort, scales = "free_x", space = "free_x") +
labs(title = "Phylum-level Relative Abundances",
x = "Sample", y = "Relative Abundance (%)",
fill = "Phylum") +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5)) +
theme_bw() +
theme(
plot.title = element_text(size =21, face = "bold", hjust = 0.5),
legend.text = element_text(size = 14),
axis.title.x = element_text(size = 14, color = "black"),
axis.title.y = element_text(size = 14, color = "black"),
axis.text.y = element_text(size = 12, color = "black"),
axis.text.x = element_text(size = 12, color = "black"),
strip.text = element_text(color = "white", face = "bold", size = rel(1.5)),
strip.background = element_rect(fill = "black", color = "black"))+
scale_fill_manual(values = allColors) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 7))
# stacked bar charts at the genus level
# --------------------------------------------------------------------------
# filter at the genus level
rel_ab_genus <- rel_ab[, grep("\\|g__[^|]*$", colnames(rel_ab))]
colnames(rel_ab_genus) <- sub("^.*\\|g__", "", colnames(rel_ab_genus))
# Subset the data by cohort
PD_genus <- rel_ab_genus[grep("1N", rownames(rel_ab_genus)), ]
Control_genus <- rel_ab_genus[grep("3N|3G", rownames(rel_ab_genus)), ]
IBD_genus <- rel_ab_genus[grep("2G", rownames(rel_ab_genus)), ]
# add a Sample column
PD_genus_df <- data.frame(Sample = rownames(PD_genus), PD_genus)
Control_genus_df <- data.frame(Sample = rownames(Control_genus), Control_genus)
IBD_genus_df <- data.frame(Sample = rownames(IBD_genus), IBD_genus)
genus_cohorts_df <- rbind(PD_genus_df, Control_genus_df, IBD_genus_df)
# Convert to long format
genus_cohorts_df_long <- pivot_longer(genus_cohorts_df,
cols = -Sample,
names_to = "Genus",
values_to = "Abundance")
# Extract cohort information from Sample column
genus_cohorts_df_long$Cohort <- ifelse(grepl("1N", genus_cohorts_df_long$Sample), "PD",
ifelse(grepl("2G", genus_cohorts_df_long$Sample), "IBD", "Control"))
# Group by cohort and genus, and calculate mean abundance
genus_cohorts_df_long_mean <- genus_cohorts_df_long %>%
group_by(Cohort, Genus) %>%
summarize(mean_abundance = mean(Abundance))
# ---------------------------------------------------------------------------------------------------
# ONLY DEPICTING THE TOP  GENERA IN EACH COHORT
# Select the top genera by total abundance across all cohorts
top_genera <- genus_cohorts_df_long_mean %>%
group_by(Genus) %>%
summarize(Total = sum(mean_abundance)) %>%
top_n(10, Total) %>%
pull(Genus)
# Filter the data to only include the top genera
genus_cohorts_df_long_mean_top10 <- genus_cohorts_df_long_mean %>%
filter(Genus %in% top_genera)
# Identify non-top genera
non_top_genera <- genus_cohorts_df_long_mean_top10 %>%
group_by(cohort) %>%
summarize(mean_abundance = 100 - sum(mean_abundance)) %>%
mutate(Genus = "Other")
# Combine the "Other" category with the existing data
genus_cohorts_df_long_mean_top10 <- rbind(genus_cohorts_df_long_mean_top10, non_top_genera)
# ---------------------------------------------------------------------------------------------------
# ONLY DEPICTING THE TOP  GENERA IN EACH COHORT
# Select the top genera by total abundance across all cohorts
top_genera <- genus_cohorts_df_long_mean %>%
group_by(Genus) %>%
summarize(Total = sum(mean_abundance)) %>%
top_n(10, Total) %>%
pull(Genus)
# Filter the data to only include the top genera
genus_cohorts_df_long_mean_top10 <- genus_cohorts_df_long_mean %>%
filter(Genus %in% top_genera)
View(genus_cohorts_df_long_mean_top10)
# Identify non-top genera
non_top_genera <- genus_cohorts_df_long_mean_top10 %>%
group_by(Cohort) %>%
summarize(mean_abundance = 100 - sum(mean_abundance)) %>%
mutate(Genus = "Other")
# Combine the "Other" category with the existing data
genus_cohorts_df_long_mean_top10 <- rbind(genus_cohorts_df_long_mean_top10, non_top_genera)
# Plot the stacked bar chart for the top 20 genera
# No warnings I can see here ****
ggplot(genus_cohorts_df_long_mean_top10, aes(x = Cohort, y = mean_abundance, fill = Genus)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Top Genus-level Relative Abundances by Cohort",
x = "Cohort", y = "Relative Abundance (%)",
fill = "Genus") +
theme_classic() +
theme(
plot.title = element_text(size =20, face = "bold", hjust = 0.5),
legend.text = element_text(size = 14),
axis.title.x = element_text(size = 14, color = "black"),
axis.title.y = element_text(size = 14, color = "black"),
axis.text.y = element_text(size = 12, color = "black"),
axis.text.x = element_text(size = 12, color = "black"),
strip.text = element_text(color = "white", face = "bold", size = rel(1.5)),
strip.background = element_rect(fill = "black", color = "black"))+
scale_y_continuous(limits = c(0, 100)) +
scale_fill_manual(values = allColors)
# each individual sample depicted
# Define a function to select the top  genera by abundance
select_top_genera <- function(Genus, n = 10) {
top_genera <- names(sort(colSums(Genus), decreasing = TRUE))[1:n]
return(Genus[, top_genera, drop = FALSE])
}
top_indiv_genera <- genus_cohorts_df_long %>%
group_by(Genus) %>%
summarize(Total = sum(Abundance)) %>%
top_n(10, Total) %>%
pull(Genus)
# Filter the data to only include the top 10 genera
genus_cohorts_df_long_top10 <- genus_cohorts_df_long %>%
filter(Genus %in% top_indiv_genera)
# Calculate abundance for "Other" for each sample
other_abundance <- genus_cohorts_df_long_top10 %>%
group_by(Sample, Cohort) %>%
summarize(Total = sum(Abundance)) %>%
ungroup() %>%
mutate(Genus = "Other", Abundance = 100 - Total)
# Add "Other" rows to the data frame
genus_cohorts_df_long_top10 <- bind_rows(genus_cohorts_df_long_top10, other_abundance)
genus_cohorts_df_long_top10$Genus <- factor(
genus_cohorts_df_long_top10$Genus,
levels = c("Other", top_indiv_genera)
)
# Define colors for each category
genus_colors <- c("Other" = "seashell2", "Porphyromonas" = "steelblue1", setNames(allColors, top_indiv_genera))
# left to right
# doesn't appear to remove any *****
ggplot(genus_cohorts_df_long_top10, aes(x = Sample, y = Abundance, fill = Genus)) +
geom_bar(stat = "identity", position = "stack") +
facet_grid(. ~ Cohort, scales = "free_x", space = "free_x") +
labs(title = "Genus-level Relative Abundances",
x = "Sample", y = "Relative Abundance (%)",
fill = "Genus") +
theme_classic() +
#scale_y_continuous(limits = c(0, 100)) +
theme(
plot.title = element_text(size = 21, face = "bold", hjust = 0.5),
legend.text = element_text(size = 11),
axis.title.x = element_text(size = 14, color = "black"),
axis.title.y = element_text(size = 14, color = "black"),
axis.text.y = element_text(size = 14, color = "black"),
axis.text.x = element_text(size = 7, angle =45, hjust = 1, color = "black"),
strip.text = element_text(color = "white", face = "bold", size = rel(1.5)),
strip.background = element_rect(fill = "black", color = "black")
) +
scale_fill_manual(values = genus_colors)
# UFPF
# get bias corrected abundances from ancombc2 output
# WITH unclassified estimation
# SPECIES
ancom2 <- readRDS("UFPF/ANCOMBC2/ancombc2 species.rds")
data <- ancom2$samp_frac
features <- ancom2$feature_table
# PATHWAYS
# get bias corrected abundances from ancombc2 output from running at the genus-level
ancom2 <- readRDS("UFPF/ANCOMBC2/ancombc2 pathways output.rds")
# ------------------------------------------------------------------------------------------
# humann pathway abundance phyloseq object
# MAKE TAXONOMY TABLE (which won't actually contain taxonomy)
load(file = "UFPF/Humann output/consolidated pathways.RData")
pathways <- df2
pathways <- t(pathways)
# -------------------------------------------------------------------------------------------
# creating a phyloseq object from the OTU table, Taxonomy table, Metadata table
Metadata <- readRDS("UFPF/Metadata.rds")
# filtering out genes that aren't present in at least 25% of samples
# Calculate the number of samples
total_samples <- ncol(pathways)
# Calculate the threshold count level (25% of total samples)
threshold_count <- 0.25 * total_samples
# Filter rows based on the threshold count
filtered_data <- pathways[rowSums(pathways != 0) >= threshold_count, ]
transformed_data <- filtered_data
transformed_data <- as.data.frame(transformed_data)    # filtered from 521 paths to 350
# move row names to a new column
transformed_data <- transformed_data %>%
rownames_to_column(var = "Genus")
# Create a new separated data frame with the specified column names
separated_data <- data.frame(
Kingdom = character(0),
Phylum = character(0),
Class = character(0),
Order = character(0),
Family = character(0),
Genus = character(0)
)
separated_data <- separated_data[1:nrow(transformed_data), ]
separated_data$Genus <- transformed_data$Genus
separated_data[, -which(names(separated_data) == "Genus")] <- "NA"
# adding OTU row names
labels <- paste0("OTU", seq_len(nrow(separated_data)))
# Assign labels to row names
rownames(separated_data) <- labels
#----------------------------------------------------------------------------------------------
# MAKE OTU TABLE
# adding OTU row names
labels <- paste0("OTU", seq_len(nrow(transformed_data)))
# Assign labels to row names
rownames(transformed_data) <- labels
# remove column we don't need in the OTU table
transformed_data <- transformed_data[, -1]
# -------------------------------------------------------------------------------------------
# creating a phyloseq object from the OTU table, Taxonomy table, Metadata table
Metadata <- readRDS("UFPF/Metadata.rds")
# Scaling Reads using Scale function (to be used as fixed effect later)
Metadata$Reads <- scale(Metadata$Reads)
# transform OTU and taxonomy table into matrices
separated_data <- as.matrix(separated_data)
transformed_data <- as.matrix(transformed_data)
# create phyloseq object
OTU = otu_table(transformed_data, taxa_are_rows = TRUE)
TAX = tax_table(separated_data)
# (1) CREATING PHYLOSEQ FROM RAW COUNTS WITH UNCLASSIFIED
# MAKE TAXONOMY TABLE
# read in metaphlan data
s_abund2 <- readRDS("UFPF/Metaphlan output/Counts/Counts w Unclassified.rds")
# read in raw counts
counts <- readRDS("UFPF/Metaphlan output/Counts/species raw counts.rds")
# read in raw counts
counts  <- readRDS("UFPF/Metaphlan output/Counts/Counts w Unclassified.rds")
counts <- column_to_rownames(counts, var = "Sample")
# remove unnecessary column Total Reads
counts <- counts[, -1]
counts <- t(counts)
rownames(counts) <- gsub("\\|", ".", rownames(counts))
# filter out rows based on phylum level
phylum <- counts[grep("\\.p__[^.]*$", rownames(counts)), ]
phylum_levels <- sub("^.*\\.p__(.+)$", "\\1", rownames(phylum))
rownames(phylum) <- phylum_levels
# filter out rows based on genus level
genus <- counts[grep("\\.g__[^.]*$", rownames(counts)), ]
genus_levels <- sub("^.*\\.g__(.+)$", "\\1", rownames(genus))
rownames(genus) <- genus_levels
# filter out rows based on species level
species <- counts[grep("\\.s__[^.]*$", rownames(counts)), ]
species_levels <- sub("^.*\\.s__(.+)$", "\\1", rownames(species))
rownames(species) <- species_levels
# transpose do samples are in row names like originally
phylym <- t(phylum)
genus <- t(genus)
species <- t(species)
View(species)
# getting counts from RAs with the unclassified flag added
rel_ab_unkn <- read.table("UFPF/Metaphlan output/metaphlan_unknown_all_combined.tsv", header = TRUE, row.names = 1, sep = "\t")
# removing "_metaphlan_rel_ab" from the end of all the sample IDs in the table
header <- names(rel_ab_unkn)
new_header <- gsub("_metaphlan_rel_ab_unknown", "", header)
names(rel_ab_unkn) <- new_header
# HMP2 IBD data IBD combined
ancom_IBD <- readRDS("HMP2_Payami/ANCOMBC2/IBD_combined_age_filt_ancombc2_taxa_w_scaled_reads.rds")
# demographics table
IBD_metadata <- readRDS("HMP2_Payami/IBD Metadata Age Filtered.rds")
# HMP2 IBD data IBD combined
ancom_IBD <- readRDS("HMP2_Payami/ANCOMBC2/HMP2 IBD species ancombc2 output.rds")
res_prim_IBD = ancom_IBD$res
sig_taxa_IBD <- res_prim_IBD %>%
rowwise() %>%
filter(any(c_across(starts_with("diff_diagnosis2IBD"))))  # 63 sig species
# Payami PD data
ancom_PD1 <- readRDS("HMP2_Payami/ANCOMBC2/Wallen PD species ancombc2 output.rds")
res_prim_PD1 = ancom_PD1$res
sig_taxa_PD1 <- res_prim_PD1 %>%
rowwise() %>%
filter(any(c_across(starts_with("diff_Case_statusPD"))))
View(sig_taxa_PD1)
# Payami PD data
ancom_PD <- readRDS("HMP2_Payami/ANCOMBC2/Wallen PD species ancombc2 output.rds")
res_prim_PD = ancom_PD$res
sig_taxa_PD <- res_prim_PD %>%
rowwise() %>%
filter(any(c_across(starts_with("diff_Case_statusPD"))))  # 11 sig species
sig_taxa_PD <- sig_taxa_PD[, c(1, 3, 19, 23)]
# subsetting enriched species
enriched_IBD <- sig_taxa_IBD[sig_taxa_IBD$lfc_diagnosis2IBD > 0, ]
enriched_PD <- sig_taxa_PD[sig_taxa_PD$lfc_Case_statusPD > 0, ]
# HMP2 IBD data IBD combined
ancom_IBD <- readRDS("HMP2_Payami/ANCOMBC2/HMP2 IBD species ancombc2 output.rds")
res_prim_IBD = ancom_IBD$res
sig_taxa_IBD <- res_prim_IBD %>%
rowwise() %>%
filter(any(c_across(starts_with("diff_diagnosis2IBD"))))  # 63 sig species
sig_taxa_IBD <- sig_taxa_IBD[, c(1, 3, 19, 23)]
# Payami PD data
ancom_PD <- readRDS("HMP2_Payami/ANCOMBC2/Wallen PD species ancombc2 output.rds")
res_prim_PD = ancom_PD$res
sig_taxa_PD <- res_prim_PD %>%
rowwise() %>%
filter(any(c_across(starts_with("diff_Case_statusPD"))))  # 11 sig species
sig_taxa_PD <- sig_taxa_PD[, c(1, 3, 19, 23)]
# subsetting enriched species
enriched_IBD <- sig_taxa_IBD[sig_taxa_IBD$lfc_diagnosis2IBD > 0, ]
enriched_PD <- sig_taxa_PD[sig_taxa_PD$lfc_Case_statusPD > 0, ]
# subsetting depleted species
depleted_IBD <- sig_taxa_IBD[sig_taxa_IBD$lfc_diagnosis2IBD < 0, ]
depleted_PD <- sig_taxa_PD[sig_taxa_PD$lfc_Case_statusPD < 0, ]
# Extract enriched species names
enriched_species_IBD <- unique(enriched_IBD$taxon)
enriched_species_PD <- unique(enriched_PD$taxon)
# Extract depleted species names
depleted_species_IBD <- unique(depleted_IBD$taxon)
depleted_species_PD <- unique(depleted_PD$taxon)
# using ggVennDiagram
x <- list(
"HMP2 IBD" = depleted_species_IBD,
"Wallen PD" = depleted_species_PD
)
venn <- Venn(x)
data <- process_data(venn)
# PATHWAYS ----------------------------------------------------------
# HMP2 IBD
paths <- readRDS("HMP2_Payami/ANCOMBC2/HMP2 IBD combined pathway ancombc2 output.rds")
results <- paths$res
sig_path <- results %>%               # 158 significant pathways
rowwise() %>%
filter(any(c_across(starts_with("diff_diagnosis2IBD"))))
# Wallen PD paths
paths <- readRDS("HMP2_Payami/ANCOMBC2/Wallen PD ancombc2 metacyc pathways.rds")
results <- paths$res
sig_path <- results %>%               # 198 significant pathways
rowwise() %>%
filter(any(c_across(starts_with("diff_Case_statusPD"))))
# read in species-level counts
IBD <- readRDS("HMP2_Payami/HMP2 IBD Age Filtered species Count.rds")
PD <- readRDS("HMP2_Payami/Wallen_counts_species.rds")
# HMP2 IBD DATA
IBD_metadata <- readRDS("HMP2_Payami/IBD Metadata Age Filtered.rds")
# GENUS LEVEL
# Making phyloseq objects with scaled reads in metadata file
IBD <- readRDS("HMP2_Payami/HMP2 IBD Age Filtered All Levels Counts.rds")
# -------------------------------------------------------------------------------------------
# creating a phyloseq object from the OTU table, Taxonomy table, Metadata table
IBD_metadata <- readRDS("HMP2_Payami/IBD Metadata Age Filtered.rds")    # metadata age filtered
# Payami PD Data
PD <- readRDS("HMP2_Payami/Wallen Counts.rds")
View(PD)
# Making phyloseq objects with scaled reads in metadata file
IBD <- readRDS("HMP2_Payami/HMP2 IBD Age Filtered All Levels Counts.rds")
# HUMANN FUNCTIONAL ANALYSIS
# create Phyloseq object
# NEED TO DO THIS WITH CONSOLIDATED DATA *
# create Phyloseq object - Pathways
load("Hmp2_Payami/HMP2 Consolidated and Age Filtered Pathways.RData")
# Plotting ANCOMBC2 data
# SPECIES LEVEL DATA - Wallen PD
ancom_PD1 <- readRDS("HMP2_Payami/ANCOMBC2/Wallen PD species ancombc2 output.rds")
# plotting GENUS LEVEL DATA - WALLEN PD
ancom_PD1 <- readRDS("HMP2_Payami/ANCOMBC2/Wallen PD genus ancombc2 output.rds")
# --------------------------------------------------------------------------
# HMP2 IBD
# plotting ancombc2 HMP2 data with CD UC combined into IBD
# SPECIES LEVEL
ancom <- readRDS("HMP2_Payami/ANCOMBC2/HMP2 IBD species ancombc2 output.rds")
# GENUS LEVEL DATA - HMP2 IBD
ancom_IBD <- readRDS("HMP2_Payami/ANCOMBC2/HMP2 IBD genus ancombc2 output.rds")
# plotting pathway data IBD vs nonIBD
ancom_path <- readRDS("HMP2_Payami/ANCOMBC2/HMP2 IBD pathway ancombc2 output.rds")
PD_KO <- readRDS("HMP2_Payami/ANCOMBC2/Wallen PD ancombc2 KO groups output.rds")
PD_path <- readRDS("HMP2_Payami/ANCOMBC2/Wallen PD ancombc2 metacyc pathways.rds")
git reset HEAD~
Wallen_counts_species <- readRDS("~/Tansey Lab/METAGENOMICS/UFPF_metagenomics/HMP2_Payami/Wallen_counts_species.rds")
`Wallen PD Metadata` <- readRDS("~/Tansey Lab/METAGENOMICS/UFPF_metagenomics/HMP2_Payami/Wallen PD Metadata.rds")
View(`Wallen PD Metadata`)
# ------------------------------------------------------------------
# HMP2 IBD dataset
# getting relative abundances at phylum, genus, species-level
IBD_filtered <- readRDS("HMP2_Payami/IBD Metadata Age Filtered.rds")
# loading in IBD taxanomic data (have to decompress file)
path <- "HMP2_Payami/taxonomic_profiles.tsv.gz"
gzipped_file <- gzfile(path, "rt")
# reading in the column names was being funky, but this way seems to work:
first_row <- readLines(gzipped_file, n = 1)
# Split the first row into column names
column_names <- unlist(strsplit(first_row, "\t"))
IBD_taxa <- read.table(gzipped_file, header = FALSE, sep = "\t", col.names = column_names)
close(gzipped_file)
# clean up column names
header <- names(IBD_taxa)
new_header <- gsub("_taxonomic_profile", "", header)
names(IBD_taxa) <- new_header
colnames(IBD_taxa)[1] <- "Sample"
# there are 1339 columns- just checking to ensure no duplicates -- *none found
duplicate_columns <- colnames(IBD_taxa)[duplicated(colnames(IBD_taxa))]
if (length(duplicate_columns) > 0) {
cat("Duplicate column names found:", paste(duplicate_columns, collapse = ", "), "\n")
} else {
cat("No duplicate column names found.\n")
}
# cleaning
IBD_taxa_t <- as.data.frame(t(IBD_taxa))
colnames(IBD_taxa_t) <- unlist(IBD_taxa_t[1, ])
IBD_taxa_t <- IBD_taxa_t[-1, ]
IBD_taxa_t <- cbind("Sample" = rownames(IBD_taxa_t), IBD_taxa_t)
rownames(IBD_taxa_t) <- NULL
# filter the taxonomic data to match the filtered metadata file
filtered_IBD_samples <- unique(IBD_filtered$Sample)
# Filter IBD taxa based on matching sample names
filtered_IBD_age <- IBD_taxa_t %>%
filter(Sample %in% filtered_IBD_samples)
# Extract "Sample" and "diagnosis" and "diagnosis2" columns for later
diagnosis <- IBD_filtered %>% select(Sample, diagnosis, diagnosis2)
filtered_IBD_age <- filtered_IBD_age %>%
column_to_rownames(var = "Sample")
# Subsetting Bacteria
bacteria <- filtered_IBD_age[, grepl("\\_Bacteria", colnames(filtered_IBD_age))]
# saving relative abundace output
saveRDS(bacteria, "HMP2_Payami/HMP2 IBD All Levels relab.rds")
