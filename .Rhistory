knitr::kable(table2, format = "html")
# getting counts from RAs with the unclassified flag added
rel_ab_unkn <- read.table("UFPF/Metaphlan output/metaphlan_unknown_all_combined.tsv", header = TRUE, row.names = 1, sep = "\t")
# removing "_metaphlan_rel_ab" from the end of all the sample IDs in the table
header <- names(rel_ab_unkn)
new_header <- gsub("_metaphlan_rel_ab_unknown", "", header)
names(rel_ab_unkn) <- new_header
# removing sample 2020-027-1N that had zero reads and 105 with no Metadata
# also removing samples with duplicate sample collection (only using the first sample a patient submitted)
rel_ab_unkn <- rel_ab_unkn %>%
select(-c("UF.PF.2020.027.1N", "UF.PF.2022.105.1N", "UF.PF.2022.084.1N2",
"UF.PF.2022.085.3N2"))
rel_ab_unkn <- as.data.frame(t(rel_ab_unkn))
# -----------------------------------------------------------------------------------------
# without the unclassified flag added
# reading .tsv file containing taxonomic classification relative abundances from MetaPhlAn
rel_ab <- read.table("UFPF/Metaphlan output/metaphlan_all_combined.tsv", header = TRUE, row.names = 1, sep = "\t")
# removing "_metaphlan_rel_ab" from the end of all the sample IDs in the table
header <- names(rel_ab)
new_header <- gsub("_metaphlan_rel_ab", "", header)
names(rel_ab) <- new_header
# removing sample 2020-027-1N that had zero reads
rel_ab <- rel_ab %>%
select(-c("UF.PF.2020.027.1N", "UF.PF.2022.105.1N", "UF.PF.2022.084.1N2",
"UF.PF.2022.085.3N2"))
library(tidyverse)
# getting counts from RAs with the unclassified flag added
rel_ab_unkn <- read.table("UFPF/Metaphlan output/metaphlan_unknown_all_combined.tsv", header = TRUE, row.names = 1, sep = "\t")
# removing "_metaphlan_rel_ab" from the end of all the sample IDs in the table
header <- names(rel_ab_unkn)
new_header <- gsub("_metaphlan_rel_ab_unknown", "", header)
names(rel_ab_unkn) <- new_header
# removing sample 2020-027-1N that had zero reads and 105 with no Metadata
# also removing samples with duplicate sample collection (only using the first sample a patient submitted)
rel_ab_unkn <- rel_ab_unkn %>%
select(-c("UF.PF.2020.027.1N", "UF.PF.2022.105.1N", "UF.PF.2022.084.1N2",
"UF.PF.2022.085.3N2"))
rel_ab_unkn <- as.data.frame(t(rel_ab_unkn))
rel_ab_unkn <- rel_ab_unkn %>%
rownames_to_column(var = "Sample")
# fixing mislabeled sample: changing 2021-023-1N to 2020-023-1N
rel_ab_unkn <- rel_ab_unkn %>%
mutate(
Sample = case_when(
Sample == "UF.PF.2021.023.1N" ~ "UF.PF.2020.023.1N",
TRUE ~ Sample
)
) %>%
arrange(as.numeric(gsub("\\D", "", Sample)))
rel_ab_unkn <- column_to_rownames(rel_ab_unkn, var = "Sample")
rel_ab_unkn <- readRDS("UFPF/Metaphlan output/rel_ab_unkn_cleaned.rds")
rel_ab_unkn <- rownames_to_column(rel_ab_unkn, "Sample")
# add in total read count that's located in the Metadata file
Metadata<- readRDS("UFPF/Metadata.rds")
nreads <- data.frame(Sample = rownames(Metadata), Reads = Metadata$Reads)
rel_ab_t_nreads <- left_join(nreads, rel_ab_unkn, by = c("Sample"))
# Create a new data frame to store the updated values
counts_data2 <- rel_ab_t_nreads
# create a function to compute the individual counts from the RA values
for (i in 1:nrow(rel_ab_t_nreads)) {
# Get the Total Read Count for the current sample
total <- rel_ab_t_nreads$"Reads"[i]
# Divide the RA values (excluding columns 1 and 2) by 100 and multiply by the Total Read Count for that sample
counts_data2[i, -(1:2)] <- rel_ab_t_nreads[i, -(1:2)] / 100 * total
}
# ------------------------------------------------------------------------------------------
# humann pathway abundance phyloseq object
# MAKE TAXONOMY TABLE (which will contain pathways in this case)
load(file = "UFPF/Humann output/consolidated pathways.RData")
pathways <- df2
pathways <- t(pathways)
# filtering out pathways that aren't present in at least 25% of samples
# Calculate the number of samples
total_samples <- ncol(pathways)
# Calculate the threshold count level (25% of total samples)
threshold_count <- 0.25 * total_samples
# Filter rows based on this threshold count
filtered_data <- pathways[rowSums(pathways != 0) >= threshold_count, ]
transformed_data <- filtered_data
transformed_data <- as.data.frame(transformed_data)    # filtered from 521 paths to 350
# move row names to a new column
transformed_data <- transformed_data %>%
rownames_to_column(var = "Genus")
# Create a new separated data frame with the specified column names.
# taxonomy is irrelevant for this analysis, but it keeps how I'm creating these phyoloseq objects consistent
separated_data <- data.frame(
Kingdom = character(0),
Phylum = character(0),
Class = character(0),
Order = character(0),
Family = character(0),
Genus = character(0)
)
separated_data <- separated_data[1:nrow(transformed_data), ]
separated_data$Genus <- transformed_data$Genus
separated_data[, -which(names(separated_data) == "Genus")] <- "NA"
# adding OTU row names
labels <- paste0("OTU", seq_len(nrow(separated_data)))
# Assign labels to row names
rownames(separated_data) <- labels
#----------------------------------------------------------------------------------------------
# MAKE OTU TABLE
# "OTU" is based on the tutorial for 16S data- OTU here is just used as a stand-in for our pathway names
# adding OTU row names
labels <- paste0("OTU", seq_len(nrow(transformed_data)))
# Assign labels to row names
rownames(transformed_data) <- labels
# remove column we don't need in the OTU table
transformed_data <- transformed_data[, -1]
# -------------------------------------------------------------------------------------------
# creating a phyloseq object from the OTU table, Taxonomy table, Metadata table
Metadata <- readRDS("UFPF/Metadata.rds")
# Scaling Reads using Scale function (to be used as fixed effect later)
Metadata$Reads <- scale(Metadata$Reads)
# transform OTU and taxonomy table into matrices
separated_data <- as.matrix(separated_data)
transformed_data <- as.matrix(transformed_data)
# create the phyloseq object
OTU = otu_table(transformed_data, taxa_are_rows = TRUE)
TAX = tax_table(separated_data)
ancom_pathways <- readRDS("UFPF/ANCOMBC2/ancombc2 pathways output.rds")
res_pair_pathways = ancom_pathways$res_pair    # 140 paths investigated
res_prim_pathways = ancom_pathways$res
sig_path <- res_pair_pathways %>%               # 132 significant pathways
rowwise() %>%
filter(any(c_across(starts_with("diff_"))))
# -----------------------------------------------------------------------------------------
# creating tables humann ancombc2 data - MetaCyc pathway abundance
sig_path <- sig_path[, c(1:7, 14:19)]
sig_taxa_long <- sig_path %>%
pivot_longer(
cols = starts_with("lfc_"),
names_to = "Comparison",
values_to = "LFC"
)
sig_taxa_long <- sig_taxa_long %>%
select(-2:-10)
# create separate data frame with significance info
diff_columns <- sig_path %>%
select(starts_with("taxon"), starts_with("diff_"))
# Convert to long format
diff_columns <- diff_columns %>%
pivot_longer(
cols = starts_with("diff_"),
names_to = "Comparison",
values_to = "Significance"
)
# create separate data frame with q values
q_columns <- sig_path %>%
select(starts_with("taxon"), starts_with("q_"))
# Convert to long format
q_columns <- q_columns %>%
pivot_longer(
cols = starts_with("q_"),
names_to = "Comparison",
values_to = "Adj P Value"
)
# create separate data frame with standard error values
se_columns <- sig_path %>%
select(starts_with("taxon"), starts_with("se_"))
# Convert to long format
se_columns <- se_columns %>%
pivot_longer(
cols = starts_with("se_"),
names_to = "Comparison",
values_to = "Standard_error"
)
# adding TRUE/FALSE info
sig_taxa_long$'Adj P Value' <- q_columns$'Adj P Value'
sig_taxa_long$Significance <- diff_columns$Significance
sig_taxa_long$Standard_error <- se_columns$Standard_error
# Rename groups in the "Comparison" column
sig_taxa_long <- sig_taxa_long %>%
mutate(Comparison = case_when(
Comparison == "lfc_Diagnosis2IBD" ~ "IBD vs Control",
Comparison == "lfc_Diagnosis2PD" ~ "PD vs Control",
Comparison == "lfc_Diagnosis2PD_Diagnosis2IBD" ~ "PD vs IBD",
TRUE ~ Comparison  # Keep other values as they are
))
# Create three separate data frames for each group- IBD, PD, and PD compared to IBD
# in this case there are no significant PD pathways
IBD_data <- sig_taxa_long %>%
filter(Comparison == "IBD vs Control", Significance == TRUE) %>%    # 93 sig paths
arrange(as.numeric(`Adj P Value`))
PD_data <- sig_taxa_long %>%
filter(Comparison == "PD vs Control", Significance == TRUE) %>%     # 1 sig path
arrange(as.numeric(`Adj P Value`))
PD_vs_IBD_data <- sig_taxa_long %>%
filter(Comparison == "PD vs IBD", Significance == TRUE) %>%         # 125 sig paths
arrange(as.numeric(`Adj P Value`))
# for later
# create tables sig pathways
depleted_IBD <- IBD_data[IBD_data$LFC < 0, ]
enriched_IBD <- IBD_data[IBD_data$LFC > 0, ]
depleted_PD <- PD_data[PD_data$LFC < 0, ]
enriched_PD <- PD_data[PD_data$LFC > 0, ]
# Species-Level
ancom <- readRDS("UFPF/ANCOMBC2/ancombc2 species.rds")
res_prim = ancom$res
res_pair = ancom$res_pair      # 233 species examined
table <- res_pair[, c(1:7, 11:16)]
table <- table %>%
rename(
species = taxon,
lfc_IBD = lfc_Diagnosis2IBD,
lfc_PD = lfc_Diagnosis2PD,
lfc_PDvsIBD = lfc_Diagnosis2PD_Diagnosis2IBD,
se_IBD = se_Diagnosis2IBD,
se_PD = se_Diagnosis2PD,
se_PDvsIBD = se_Diagnosis2PD_Diagnosis2IBD,
pval_IBD = p_Diagnosis2IBD,
pval_PD = p_Diagnosis2PD,
pval_PDvsIBD = p_Diagnosis2PD_Diagnosis2IBD,
adj_pval_IBD = q_Diagnosis2IBD,
adj_pval_PD = q_Diagnosis2PD,
adj_pval_PDvsIBD = q_Diagnosis2PD_Diagnosis2IBD
)
# Create table using kable and kableExtra
table_formatted <- table %>%
kable(format = "html", table.attr = 'class="table table-striped table-hover"', caption = "UFPF ANCOMBC2 Species Taxonomic Output") %>%
kable_styling("striped", full_width = FALSE)
library(kableExtra)
# Create table using kable and kableExtra
table_formatted <- table %>%
kable(format = "html", table.attr = 'class="table table-striped table-hover"', caption = "UFPF ANCOMBC2 Species Taxonomic Output") %>%
kable_styling("striped", full_width = FALSE)
print(table_formatted)
detach("package:kableExtra", unload = TRUE)
# UFPF SPECIES
ancom2 <- readRDS("UFPF/ANCOMBC2/ancombc2 species.rds")
data <- ancom2$samp_frac
features <- ancom2$feature_table
# Add pesudo-count to avoid taking the log of 0
log_obs_abn = log(features + 1)
# Adjust the log observed abundances
log_corr_abn = t(t(log_obs_abn) - data)
UFPF_abundances <- as.data.frame(t(log_corr_abn))
# UFPF SPECIES
ancom2 <- readRDS("UFPF/ANCOMBC2/ancombc2 species.rds")
data <- ancom2$samp_frac
features <- ancom2$feature_table
# Add pesudo-count to avoid taking the log of 0
log_obs_abn = log(features + 1)
# Adjust the log observed abundances
log_corr_abn = t(t(log_obs_abn) - data)
UFPF_abundances <- as.data.frame(t(log_corr_abn))
saveRDS(UFPF_abundances, "UFPF/ANCOMBC2/bias corrected abund species.rds")
# read in raw counts
counts  <- readRDS("UFPF/Metaphlan output/Counts/Counts w Unclassified.rds")
counts <- column_to_rownames(counts, var = "Sample")
library(tidyverse)
# generating count tables (counts computed w/the unclassified estimation)
# at the phylum, genus, and species levels
# read in raw counts
counts  <- readRDS("UFPF/Metaphlan output/Counts/Counts w Unclassified.rds")
counts <- column_to_rownames(counts, var = "Sample")
# remove unnecessary column Total Reads
counts <- counts[, -1]
counts <- t(counts)
rownames(counts) <- gsub("\\|", ".", rownames(counts))
# filter out rows based on phylum level
phylum <- counts[grep("\\.p__[^.]*$", rownames(counts)), ]
phylum_levels <- sub("^.*\\.p__(.+)$", "\\1", rownames(phylum))
rownames(phylum) <- phylum_levels
# filter out rows based on genus level
genus <- counts[grep("\\.g__[^.]*$", rownames(counts)), ]
genus_levels <- sub("^.*\\.g__(.+)$", "\\1", rownames(genus))
rownames(genus) <- genus_levels
# filter out rows based on species level
species <- counts[grep("\\.s__[^.]*$", rownames(counts)), ]
species_levels <- sub("^.*\\.s__(.+)$", "\\1", rownames(species))
rownames(species) <- species_levels
# transpose so samples are in row names like originally
phylym <- t(phylum)
genus <- t(genus)
species <- t(species)
# enriched and depleted IBD and PD pathways
ibd_depleted <- readRDS("UFPF/ANCOMBC2/ANCOMBC2 Tables/Enriched vs Depleted/Pathways/depleted pathways IBD.rds")
ibd_enriched <- readRDS("UFPF/ANCOMBC2/ANCOMBC2 Tables/Enriched vs Depleted/Pathways/enriched pathways IBD.rds")
pd_depleted <- readRDS("UFPF/ANCOMBC2/ANCOMBC2 Tables/Enriched vs Depleted/Pathways/depleted pathways PD.rds")
pd_enriched <- readRDS("UFPF/ANCOMBC2/ANCOMBC2 Tables/Enriched vs Depleted/Pathways/enriched pathways PD.rds")
# Extract enriched names
enriched_paths_IBD <- unique(ibd_enriched$taxon)
enriched_paths_PD <- unique(pd_enriched$taxon)
# Extract depleted names
depleted_paths_IBD <- unique(ibd_depleted$taxon)
depleted_paths_PD <- unique(pd_depleted$taxon)
# DEPLETED
x <- list(
"UFPF IBD" = depleted_paths_IBD,
"UFPF PD" = depleted_paths_PD
)
venn <- Venn(x)
data <- process_data(venn)
# enriched and depleted IBD and PD pathways
ibd_depleted <- readRDS("UFPF/ANCOMBC2/ANCOMBC2 Tables/Enriched vs Depleted/Pathways/depleted pathways IBD.rds")
ibd_enriched <- readRDS("UFPF/ANCOMBC2/ANCOMBC2 Tables/Enriched vs Depleted/Pathways/enriched pathways IBD.rds")
pd_depleted <- readRDS("UFPF/ANCOMBC2/ANCOMBC2 Tables/Enriched vs Depleted/Pathways/depleted pathways PD.rds")
pd_enriched <- readRDS("UFPF/ANCOMBC2/ANCOMBC2 Tables/Enriched vs Depleted/Pathways/enriched pathways PD.rds")
# Extract enriched names
enriched_paths_IBD <- unique(ibd_enriched$taxon)
enriched_paths_PD <- unique(pd_enriched$taxon)
# Extract depleted names
depleted_paths_IBD <- unique(ibd_depleted$taxon)
depleted_paths_PD <- unique(pd_depleted$taxon)
# DEPLETED
x <- list(
"UFPF IBD" = depleted_paths_IBD,
"UFPF PD" = depleted_paths_PD
)
venn <- Venn(x)
data <- process_data(venn)
library(ggplot2)
library(VennDiagram)
venn <- Venn(x)
data <- process_data(venn)
# CUSTOMIZE GROUP COLORS
# vector for colors - optinos- pick the one thats the least hideous
colorGroups <- c("UFPF IBD"= "green", "UFPF PD" = "blue")
# use colorRampPalette to create function that interpolates colors
colfunc <- colorRampPalette(colorGroups)
col <- colfunc(3)
ggplot() +
geom_sf(aes(fill = name), data = venn_region(data), show.legend = FALSE) +
geom_sf(aes(color = name), data = venn_setedge(data), show.legend = FALSE) +
geom_sf_text(aes(label = name), size = 16, data = venn_setlabel(data)) +
geom_sf_text(aes(label = count), size = 20, data = venn_region(data)) +
scale_fill_manual(values = alpha(col, .25)) +
scale_color_manual(values = col) +
theme_void()
detach("package:VennDiagram", unload = TRUE)
library(ggVennDiagram)
venn <- Venn(x)
data <- process_data(venn)
# CUSTOMIZE GROUP COLORS
# vector for colors - optinos- pick the one thats the least hideous
colorGroups <- c("UFPF IBD"= "green", "UFPF PD" = "blue")
# use colorRampPalette to create function that interpolates colors
colfunc <- colorRampPalette(colorGroups)
col <- colfunc(3)
ggplot() +
geom_sf(aes(fill = name), data = venn_region(data), show.legend = FALSE) +
geom_sf(aes(color = name), data = venn_setedge(data), show.legend = FALSE) +
geom_sf_text(aes(label = name), size = 16, data = venn_setlabel(data)) +
geom_sf_text(aes(label = count), size = 20, data = venn_region(data)) +
scale_fill_manual(values = alpha(col, .25)) +
scale_color_manual(values = col) +
theme_void()
# ----------------------------------------------------------
# ENRICHED
x <- list(
"UFPF IBD" = enriched_paths_IBD,
"UFPF PD" = enriched_paths_PD
)
venn <- Venn(x)
data <- process_data(venn)
# CUSTOMIZE GROUP COLORS
# vector for colors - optinos- pick the one thats the least hideous
colorGroups <- c("UFPF IBD"= "green", "UFPF PD" = "blue")
# use colorRampPalette to create function that interpolates colors
colfunc <- colorRampPalette(colorGroups)
col <- colfunc(3)
ggplot() +
geom_sf(aes(fill = name), data = venn_region(data), show.legend = FALSE) +
geom_sf(aes(color = name), data = venn_setedge(data), show.legend = FALSE) +
geom_sf_text(aes(label = name), size = 16, data = venn_setlabel(data)) +
geom_sf_text(aes(label = count), size = 20, data = venn_region(data)) +
scale_fill_manual(values = alpha(col, .25)) +
scale_color_manual(values = col) +
theme_void()
detach("package:ggVennDiagram", unload = TRUE)
pathway_abundance <- read_tsv("UFPF/Humann output/pathway_abundance_all.tsv")
library(readr)
pathway_abundance <- read_tsv("UFPF/Humann output/pathway_abundance_all.tsv")
# removing extra from the end of all the sample IDs in the table
header <- names(pathway_abundance)
new_header <- str_remove_all(header, "_all_Abundance") %>%
str_replace_all("-", ".")
library(tidyverse)
# removing extra from the end of all the sample IDs in the table
header <- names(pathway_abundance)
new_header <- str_remove_all(header, "_all_Abundance") %>%
str_replace_all("-", ".")
names(pathway_abundance) <- new_header
# removing samples with few reads (027), duplicate sample collections, and samples with no metadata(105)
pathway_abundance <- subset(pathway_abundance, select = -c(
UF.PF.2020.027.1N,
UF.PF.2022.069.1N_Abundance,
UF.PF.2022.070.3N_Abundance,
UF.PF.2022.075.1N_Abundance,
UF.PF.2022.076.1N_Abundance,
UF.PF.2022.084.1N2_Abundance,
UF.PF.2022.085.3N2_Abundance,
UF.PF.2022.105.1N_Abundance
))
# removing other extra from the end of all the new sample IDs in the table
header <- names(pathway_abundance)
new_header <- str_remove_all(header, "_Abundance") %>%
str_replace_all("-", ".")
names(pathway_abundance) <- new_header
# transpose so samples are row names
pathway_abundance <- t(pathway_abundance)
pathway_abundance <- as.data.frame(pathway_abundance)
colnames(pathway_abundance) <- pathway_abundance[1, ]
pathway_abundance <- pathway_abundance[-1, ]
# group into cohorts
PDp <- pathway_abundance[grep("1N", rownames(pathway_abundance)), ]
Controlp <- pathway_abundance[grep("3N|3G", rownames(pathway_abundance)), ]
IBDp <- pathway_abundance[grep("2G", rownames(pathway_abundance)), ]
all_cohorts_p <- rbind(PDp, Controlp, IBDp)
#~~~~ I use dplyr::select to remove columns whose names contain "UNINTEGRATED" + UNMAPPED \
all_cohorts_p <- all_cohorts_p %>%
dplyr::select(-matches("UNINTEGRATED"), -UNMAPPED) %>%
mutate_all(as.numeric)
colnames(all_cohorts_p) <- sub("\\[EC.*", "", colnames(all_cohorts_p))
colnames(all_cohorts_p) <- sub("\\|.*", "", colnames(all_cohorts_p))
colnames(all_cohorts_p)
str(all_cohorts_p)
df2 <- sapply(split.default(all_cohorts_p, names(all_cohorts_p)), rowSums, na.rm = T) %>%
as.data.frame()
names <- colnames(df2)
names <- sub("\\:.*", "", names)
length(unique(names)) == length(names)
# running at the species level
ancom <- readRDS("UFPF/ANCOMBC2/ancombc2 species.rds")
res_prim = ancom$res
res_pair = ancom$res_pair      # 233 species examined
sig_taxa <- res_pair %>%
rowwise() %>%
filter(any(c_across(starts_with("diff_"))))    # 1 sig taxa significant
# plotting UFPF anombc2 data
library(tidyverse)
library(ggplot2)
# running at the species level
ancom <- readRDS("UFPF/ANCOMBC2/ancombc2 species.rds")
res_prim = ancom$res
res_pair = ancom$res_pair      # 233 species examined
sig_taxa <- res_pair %>%
rowwise() %>%
filter(any(c_across(starts_with("diff_"))))    # 1 sig taxa significant
# plot significant taxon only
standard_errors <- sig_taxa[, c(1, 5:7)]
sig_taxa <- sig_taxa[1:4]
# Renaming columns a less friendy way that works
colnames(sig_taxa)[colnames(sig_taxa) == "lfc_Diagnosis2IBD"] <- "IBD vs Control"
colnames(sig_taxa)[colnames(sig_taxa) == "lfc_Diagnosis2PD"] <- "PD vs Control"
colnames(sig_taxa)[colnames(sig_taxa) == "lfc_Diagnosis2PD_Diagnosis2IBD"] <- "PD vs IBD"
colnames(standard_errors)[colnames(standard_errors) == "se_Diagnosis2IBD"] <- "IBD vs Control"
colnames(standard_errors)[colnames(standard_errors) == "se_Diagnosis2PD"] <- "PD vs Control"
colnames(standard_errors)[colnames(standard_errors) == "se_Diagnosis2PD_Diagnosis2IBD"] <- "PD vs IBD"
# Melt the data frame into long format for ggplot
sig_taxa_long <- melt(sig_taxa, id.vars = "taxon")
library(reshape2)
# Melt the data frame into long format for ggplot
sig_taxa_long <- melt(sig_taxa, id.vars = "taxon")
se_long <- melt(standard_errors, id.vars = "taxon")
sig_taxa_long <- sig_taxa_long %>%
rename(LFC = value)
se_long <- se_long %>%
rename(standard_error = value)
sig_taxa_long <- left_join(sig_taxa_long, se_long, by = c("taxon", "variable"))
# adding a column to denote significance
sig_taxa_long <-  sig_taxa_long %>%
mutate(significance = c(TRUE, FALSE, FALSE))
# for plot, pick colors for comparisons
legend_colors <- list(
"IBD vs Control" = "chartreuse3",
"PD vs Control" = "dodgerblue3",
"PD vs IBD" = "darkmagenta"
)
# plotting with significant stars
ggplot(sig_taxa_long, aes(x = LFC, y = taxon, fill = variable)) +
geom_bar(stat = "identity", position = "dodge") +
geom_errorbarh(
aes(xmin = LFC - standard_error, xmax = LFC + standard_error),
position = position_dodge(0.9),
height = 0.25,  # Adjust the height of the error bars
size = 0.5,    # Adjust the size of the error bars
color = "gray73"  # Set the color of the error bars
) +
geom_text(
aes(label = ifelse(significance, "*", "")),
position = position_dodge(0.9),
vjust = 0.4, # Adjust vertical position of stars
size = 10      # Adjust size of stars
) +
labs(
title = "Species-Level Differential Abundance Analysis",
x = "Log Fold Change",
y = "Species",
fill = "Comparison"
) +
scale_fill_manual(
values = legend_colors,
name = "Pairwise Comparisons"
) +
theme_bw(base_size = 16) +
theme(
plot.title = element_text(size = 21, face = "bold", hjust = 0.5),
legend.text = element_text(size = 16),
axis.title.x = element_text(size = 16, color = "black"),
axis.title.y = element_text(size = 16, color = "black"),
axis.text.y = element_text(size = 18, color = "black", face = "italic"),
axis.text.x = element_text(size = 16, color = "black"),
strip.text = element_text(color = "white", face = "bold", size = rel(1.5))
)
# for plot, pick colors for comparisons
legend_colors <- list(
"IBD vs Control" = "chartreuse3",
"PD vs Control" = "dodgerblue3",
"PD vs IBD" = "darkmagenta"
)
