up_idx <- taxa %in% up_features
down_idx <- taxa %in% down_features
modules[up_idx] <- "up"
modules[down_idx] <- "down"
modules[modules == "FALSE"] <- "ns"
MEs <- moduleEigengenes(counts_of_interest, modules)
# Extract module scores (eigengenes)
module_scores <- MEs$averageExpr
colnames(module_scores) <- str_remove_all(colnames(module_scores), "AE")
return(list(module_scores = module_scores, modules = modules))
}
# Example for UF data:
uf_module_results <- make_coabundance_module(uf.counts, wallen.features.up, wallen.features.down)
uf_module_scores <- uf_module_results$module_scores
write.csv(uf_module_scores, "Module_scripts/uf_module_scores.csv", row.names = TRUE)
# Example for Wallen data:
wallen_module_results <- make_coabundance_module(wallen.counts, wallen.features.up, wallen.features.down)
wallen_module_scores <- wallen_module_results$module_scores
write.csv(wallen_module_scores, "Module_scripts/wallen_module_scores.csv", row.names = TRUE)
# Example for HMP2 data:
hmp2_module_results <- make_coabundance_module(hmp2.counts, hmp2.features.ibd.up, hmp2.features.ibd.down)
hmp2_module_scores <- hmp2_module_results$module_scores
write.csv(hmp2_module_scores, "Module_scripts/hmp2_module_scores.csv", row.names = TRUE)
# Pathways
#Loading RDS data ----
hmp2.meta <- readRDS("HMP2_Payami/IBD Metadata Age Filtered.rds")
uf.meta <- readRDS("UFPF/Metadata.rds")
wallen.meta <- readRDS("HMP2_Payami/Wallen PD Metadata.rds")
hmp2.stats <- readRDS("HMP2_Payami/ANCOMBC2/HMP2 IBD pathway ancombc2 output.rds")
uf.stats <- readRDS("UFPF/ANCOMBC2/UFPF ancombc2 pathways.rds")
wallen.stats <- readRDS("HMP2_Payami/ANCOMBC2/Wallen PD ancombc2 metacyc pathways.rds")
hmp2.counts <- readRDS("HMP2_Payami/ANCOMBC2/HMP2 IBD pathway bias corrected abund.rds")
uf.counts <- readRDS("UFPF/ANCOMBC2/bias corrected abund pathways.rds")
wallen.counts <- readRDS("HMP2_Payami/ANCOMBC2/Wallen PD paths bias corrected abund ancombc2.rds")
# making the names clearer to identify each dataset in the plots
uf.meta$Diagnosis2 <- paste("UFPF", uf.meta$Diagnosis2, sep = " ")
wallen.meta$Case_status <- paste("Wallen", wallen.meta$Case_status, sep = " ")
hmp2.meta$diagnosis2 <- ifelse(hmp2.meta$diagnosis2 == "nonIBD", "non-IBD", hmp2.meta$diagnosis2)
hmp2.meta$diagnosis2 <- paste("HMP2", hmp2.meta$diagnosis2, sep = " ")
#Pull out taxa that are significantly associated with different diseases from external datasets according to lfc and pval ----
hmp2.stats$res %>%
filter(diff_diagnosis2IBD == T) %>%
filter(lfc_diagnosis2IBD > 0) %>%
pull(taxon) -> hmp2.features.ibd.up
hmp2.stats$res %>%
filter(diff_diagnosis2IBD == T) %>%
filter(lfc_diagnosis2IBD < 0) %>%
pull(taxon) -> hmp2.features.ibd.down
wallen.stats$res %>%
filter(diff_Case_statusPD == T) %>%
filter(lfc_Case_statusPD > 0) %>%
pull(taxon) -> wallen.features.up
wallen.stats$res %>%
filter(diff_Case_statusPD == T) %>%
filter(lfc_Case_statusPD < 0) %>%
pull(taxon) -> wallen.features.down
#This function generates the average abundance dataframe in a dataset of interest (counts_of_interest)
#based on over- and under-abundant taxonomic features (up_features and down_features, respectively)
#Those feature lists were generated in the previous section ---
make_coabundance_module <- function(counts_of_interest, up_features, down_features){
l <- ncol(counts_of_interest)
modules <- vector(length = l)
taxa <- colnames(counts_of_interest)
up_idx <- taxa %in% up_features
down_idx <- taxa %in% down_features
modules[up_idx] <- "up"
modules[down_idx] <- "down"
modules[modules == "FALSE"] <- "ns"
MEs <- moduleEigengenes(counts_of_interest,
modules)
data <- MEs$averageExpr
colnames(data) <- str_remove_all(colnames(data), "AE")
return(data)
}
#Get module scores of PD and IBD in UF data ----
uf_pd_module <- make_coabundance_module(uf.counts,
wallen.features.up,
wallen.features.down)
uf_ibd_module <- make_coabundance_module(uf.counts,
hmp2.features.ibd.up,
hmp2.features.ibd.down)
#Get module scores in Payami's data of PD and IBD associated taxa ----
#In this case, we are both creating and testing the PD module in the PD dataset
#The results from this should be obvious - this is more of a quality control step on the coding part.
#i.e., the module made from species enriched in the PD microbiome should definitely be UP in the PD samples,
wallen_pd_module <- make_coabundance_module(wallen.counts,
wallen.features.up,
wallen.features.down)
wallen_ibd_module <- make_coabundance_module(wallen.counts,
hmp2.features.ibd.up,
hmp2.features.ibd.down)
#Get module scores in the HMP2 data of PD and IBD associated taxa ----
#As above, it lets me make sure that the code is running right
hmp2_pd_module <- make_coabundance_module(hmp2.counts,
wallen.features.up,
wallen.features.down)
hmp2_ibd_module <- make_coabundance_module(hmp2.counts,
hmp2.features.ibd.up,
hmp2.features.ibd.down)
#These functions runs stats on modules of interest in the data of interest and draws the plot ----
#The `expr` variable is the module dataframe generated above using the make_coabundance_module function
#The `module` variable is a string of "up" or "down," referring to what features you want to see plotted
#Basically, pick the external features you want to see in the UF data and whether those features are up or down originally
#Using uf_pd_module means you're looking at the PD-associated taxa from Wallen et al
#Then, specifying "up" means you want to know about the abundance of the PD-enriched taxa in the UF data
#The logic is the same for the other functions I've created below, just focusing on a different test dataset
uf_module_plot <- function(expr, module){
data <- expr %>%
rownames_to_column(var = "id") %>%
left_join(uf.meta %>%
rownames_to_column(var = "id"),
by = "id")
lm <- aov_ez(id = "id", #aov_ez from the afex package
dv = module,
between = "Diagnosis2",
data = data)
print(lm) #this will print the ANOVA table in the console so you can see p, F values for yourself
emm <- emmeans(lm, specs = pairwise ~ Diagnosis2) #pairwise comparisons using the emmeans package
cld <- multcomp::cld(emm, Letters = letters) #LETTERS! from the multcomp package
cld <- cld %>%
mutate(.group = str_remove_all(.group, " "))
module2 <- ensym(module)
#I just needed a way to use the direction specified by the `module` variable to also call a column in ggplot's aes(),
#which doesn't work with character strings. This fixed it
data %>%
left_join(cld, by = "Diagnosis2") %>%
ggplot(aes(x = Diagnosis2, y = !!module2)) +
geom_quasirandom(aes(fill = Diagnosis2, shape = Diagnosis2),
size = 6,
show.legend = F,
alpha = 0.7) +
stat_summary(color = "black",
fun = "mean",
geom = "crossbar",
show.legend = F) +
stat_summary(color = "black",
fun.data = mean_se,
geom = "errorbar",
show.legend = F,
width = 0.6,
linewidth = 1.2) +
geom_text(aes(color = Diagnosis2, label = .group,
y = max(!!module2 + 0.3 * sd(!!module2, na.rm = T))),
size = 8,
show.legend = F) +
scale_shape_manual(values = c(21, 22, 23)) +
scale_fill_paletteer_d(palette = "tvthemes::kimPossible") +
scale_color_paletteer_d(palette = "tvthemes::kimPossible") +
labs(y = "Average z-scored bias-corrected abundaces") +
theme_bw(base_size = 16) +
theme(axis.text = element_text(color = "black"),
axis.title.x = element_blank())
}
gg_record(device= "png",
units = "in",
dpi = 600,
height = 6,
width = 6)
uf_module_plot(uf_pd_module, "down")
gg_stop_recording()
wallen_feature_plot <- function(expr, module){
data <- expr %>%
rownames_to_column(var = "id") %>%
left_join(wallen.meta %>%
rownames_to_column(var = "id"),
by = "id")
lm <- aov_ez(id = "id",
dv = module,
between = "Case_status",
data = data)
emm <- emmeans(lm, specs = pairwise ~ Case_status)
cld <- multcomp::cld(emm, Letters = letters)
cld <- cld %>%
mutate(.group = str_remove_all(.group, " "))
module2 <- ensym(module)
data %>%
left_join(cld, by = "Case_status") %>%
ggplot(aes(x = Case_status, y = !!module2)) +
geom_quasirandom(aes(fill = Case_status, shape = Case_status),
size = 4,
show.legend = F,
alpha = 0.7) +
stat_summary(color = "black",
fun = "mean",
geom = "crossbar",
show.legend = F) +
stat_summary(color = "black",
fun.data = mean_se,
geom = "errorbar",
show.legend = F,
width = 0.6,
linewidth = 1.2) +
geom_text(aes(color = Case_status, label = .group,
y = max(!!module2 + 0.3 * sd(!!module2, na.rm = T))),
size = 8,
show.legend = F) +
scale_shape_manual(values = c(21, 22)) +
scale_fill_paletteer_d(palette = "ggthemes::stata_s1color") +
scale_color_paletteer_d(palette = "ggthemes::stata_s1color") +
labs(y = "Average z-scored bias-corrected abundaces") +
theme_bw(base_size = 16) +
theme(axis.text = element_text(color = "black"),
axis.title.x = element_blank())
}
gg_record(device= "png",
units = "in",
dpi = 600,
height = 6,
width = 4.5)
wallen_feature_plot(wallen_pd_module, "up")
gg_stop_recording()
hmp2_feature_plot <- function(expr, module){
data <- expr %>%
rownames_to_column(var = "Sample") %>%
left_join(hmp2.meta,
by = "Sample")
lm <- aov_ez(id = "Sample",
dv = module,
between = "diagnosis2",
data = data)
print(lm)
emm <- emmeans(lm, specs = pairwise ~ diagnosis2)
cld <- multcomp::cld(emm, Letters = letters)
cld <- cld %>%
mutate(.group = str_remove_all(.group, " "))
module2 <- ensym(module)
data %>%
left_join(cld, by = "diagnosis2") %>%
mutate(diagnosis2 = factor(diagnosis2,
levels = c("HMP2 non-IBD", "HMP2 IBD"))) %>%
ggplot(aes(x = diagnosis2, y = !!module2)) +
geom_quasirandom(aes(fill = diagnosis2, shape = diagnosis2),
size = 4,
show.legend = F,
alpha = 0.7) +
stat_summary(color = "black",
fun = "mean",
geom = "crossbar",
show.legend = F) +
stat_summary(color = "black",
fun.data = mean_se,
geom = "errorbar",
show.legend = F,
width = 0.6,
linewidth = 1.2) +
geom_text(aes(color = diagnosis2, label = .group,
y = max(!!module2 + 0.3 * sd(!!module2, na.rm = T))),
size = 8,
show.legend = F) +
scale_shape_manual(values = c(21, 22, 23)) +
scale_fill_paletteer_d(palette = "ggthemes::excel_Slice") +
scale_color_paletteer_d(palette = "ggthemes::excel_Slice") +
labs(y = "Average z-scored bias-corrected abundaces") +
theme_bw(base_size = 16) +
theme(axis.text = element_text(color = "black"),
axis.title.x = element_blank())
}
gg_record(device = "png",
units = "in", dpi = 600,
height = 6, width = 6)
hmp2_feature_plot(hmp2_pd_module, "up")
gg_stop_recording()
theme <- theme(plot.title = element_text(hjust = 0.5, size = 20))
annotate_figure(
ggarrange(uf_module_plot(uf_pd_module, "up") +
ggtitle("Enriched in Wallen PD") + theme,
uf_module_plot(uf_pd_module, "down") +
ggtitle("Depleted in Wallen PD") + theme,
uf_module_plot(uf_ibd_module, "up") +
ggtitle("Enriched in HMP2 IBD") + theme,
uf_module_plot(uf_ibd_module, "down") +
ggtitle("Depleted in HMP2 IBD") + theme,
nrow = 1, ncol = 4),
top = text_grob("Abundance of disease-associated pathways in the UFPF dataset",
size = 24, face = "bold")
) -> p1
annotate_figure(
ggarrange(wallen_feature_plot(wallen_ibd_module, "up") +
ggtitle("Enriched in HMP2 IBD") + theme,
wallen_feature_plot(wallen_ibd_module, "down") +
ggtitle("Depleted in HMP2 IBD") + theme,
hmp2_feature_plot(hmp2_pd_module, "up") +
ggtitle("Enriched in Wallen PD") + theme,
hmp2_feature_plot(hmp2_pd_module, "down") +
ggtitle("Depleted in Wallen PD") + theme,
nrow = 1, ncol = 4),
top = text_grob("Abundance of disease-associated pathways in the Wallen and HMP2 datasets",
size = 24, face = 'bold')
) -> p2
gg_record(device = "png",
units = "in", dpi = 600,
height = 11, width = 18)
ggarrange(p1, p2,
nrow = 2, ncol = 1)
#__________________________________________________________________________________
# PATHWAYS
# Function to extract module list
extract_module_list <- function(counts_of_interest, up_features, down_features){
l <- ncol(counts_of_interest)
modules <- vector(length = l)
taxa <- colnames(counts_of_interest)
up_idx <- taxa %in% up_features
down_idx <- taxa %in% down_features
modules[up_idx] <- "up"
modules[down_idx] <- "down"
modules[modules == "FALSE"] <- "ns"
module_list <- data.frame(Species = taxa, Module = modules)
return(module_list)
}
# Example for each dataset:
uf_module_list <- extract_module_list(uf.counts, wallen.features.up, wallen.features.down)
wallen_module_list <- extract_module_list(wallen.counts, wallen.features.up, wallen.features.down)
hmp2_module_list <- extract_module_list(hmp2.counts, hmp2.features.ibd.up, hmp2.features.ibd.down)
View(hmp2_module_list)
# You can now write these to CSV for your supplement
write.csv(uf_module_list, "Module_scripts/uf_path_module_list.csv", row.names = FALSE)
write.csv(wallen_module_list, "Module_scripts/wallen_path_module_list.csv", row.names = FALSE)
write.csv(hmp2_module_list, "Module_scripts/hmp2_path_module_list.csv", row.names = FALSE)
# Function to extract module scores
make_coabundance_module <- function(counts_of_interest, up_features, down_features){
l <- ncol(counts_of_interest)
modules <- vector(length = l)
taxa <- colnames(counts_of_interest)
up_idx <- taxa %in% up_features
down_idx <- taxa %in% down_features
modules[up_idx] <- "up"
modules[down_idx] <- "down"
modules[modules == "FALSE"] <- "ns"
MEs <- moduleEigengenes(counts_of_interest, modules)
# Extract module scores (eigengenes)
module_scores <- MEs$averageExpr
colnames(module_scores) <- str_remove_all(colnames(module_scores), "AE")
return(list(module_scores = module_scores, modules = modules))
}
# Example for UF data:
uf_module_results <- make_coabundance_module(uf.counts, wallen.features.up, wallen.features.down)
uf_module_scores <- uf_module_results$module_scores
write.csv(uf_module_scores, "Module_scripts/uf_path_module_scores.csv", row.names = TRUE)
# Example for Wallen data:
wallen_module_results <- make_coabundance_module(wallen.counts, wallen.features.up, wallen.features.down)
wallen_module_scores <- wallen_module_results$module_scores
write.csv(wallen_module_scores, "Module_scripts/wallen_path_module_scores.csv", row.names = TRUE)
# Example for HMP2 data:
hmp2_module_results <- make_coabundance_module(hmp2.counts, hmp2.features.ibd.up, hmp2.features.ibd.down)
hmp2_module_scores <- hmp2_module_results$module_scores
write.csv(hmp2_module_scores, "Module_scripts/hmp2_path_module_scores.csv", row.names = TRUE)
View(Metadata)
# Making phyloseq objects with scaled reads in metadata file
IBD <- readRDS("HMP2_Payami/HMP2 IBD Age Filtered All Levels Counts.rds")
View(IBD)
# -------------------------------------------------------------------------------------------
# creating a phyloseq object from the OTU table, Taxonomy table, Metadata table
IBD_metadata <- readRDS("HMP2_Payami/IBD Metadata Age Filtered.rds")
View(IBD_metadata)
IBD_metadata$fecalcal
sum(is.na(IBD_metadata$fecalcal))
249/337
# PCoA on Aitchison distances (aka Euclidean distances on CLR-transformed counts)
library(compositions)
library(vegan)
library(ggplot2)
library(ape)
library(pairwiseAdonis)
# read in raw counts
counts <- readRDS("UFPF/Metaphlan output/Counts/species raw counts.rds")
# add a small pseudocount to avoid any zeros in the df which clr doesn't like
counts <- counts + 1e-10
# perform clr transformation
# make sure this is using the compositions package to perform clr
clr_species <- compositions::clr(counts)
# subset cohorts
PD_s <- clr_species[grep("1N", rownames(clr_species)), ]
Control_s <- clr_species[grep("3N|3G", rownames(clr_species)), ]
IBD_s <- clr_species[grep("2G", rownames(clr_species)), ]
all_cohorts_s <- rbind(PD_s, Control_s, IBD_s)
all_cohorts_s <- as.data.frame(all_cohorts_s)
# create a new data frame with columns for sample ID and cohort
all_cohorts_s <- cbind(
data.frame(Sample_ID = rownames(all_cohorts_s),
cohort = ifelse(grepl("1N", rownames(all_cohorts_s)), "PD",
ifelse(grepl("2G", rownames(all_cohorts_s)), "IBD",
ifelse(grepl("3N|3G", rownames(all_cohorts_s)), "Control", NA)))),
all_cohorts_s
)
# convert data to matrix, ignoring sample and cohort columns
all_cohorts_s2 <- all_cohorts_s[, -(1:2)]
matrix_s <- as.matrix(all_cohorts_s2)
# Calculate Euclidean distance using the distance matrix (again these are technically now considered Aitchison distances)
euclidean_dist_s <- vegdist(matrix_s, method = "euclidean")
# Run PCoA on the aitchison distance matrix
pcoa_s <- pcoa(euclidean_dist_s, correction = "none")
# Access the eigenvalues and eigenvectors from the PCoA results
eigenvalues_s <- pcoa_s$values$values
eigenvectors_s <- pcoa_s$vectors
# Combine cohorts and produce PCoA data frames
pcoa_s_df <- data.frame(Sample_ID = all_cohorts_s$Sample_ID,
cohort = all_cohorts_s$cohort,
PCoA1 = eigenvectors_s[, 1],
PCoA2 = eigenvectors_s[, 2])
ggplot(pcoa_s_df, aes(x = PCoA1, y = PCoA2, color = cohort)) +
geom_point(size = 3.0) +
stat_ellipse() +
scale_color_manual(values = c("mediumorchid1", "limegreen", "royalblue")) +
xlab("PCoA 1") +
ylab("PCoA 2") +
ggtitle("PCoA Aitchison Distances") +
theme(plot.title = element_text(hjust = 0.5)) +
theme_bw() +
theme(
plot.title = element_text(size =21, face = "bold", hjust = 0.5),
legend.text = element_text(size = 14),
axis.title.x = element_text(size = 14, color = "black"),
axis.title.y = element_text(size = 14, color = "black"),
axis.text.y = element_text(size = 12, color = "black"),
axis.text.x = element_text(size = 12, color = "black"),
strip.text = element_text(color = "white", face = "bold", size = rel(1.5)),
strip.background = element_rect(fill = "black", color = "black"))
# read in raw counts
counts <- readRDS("UFPF/Metaphlan output/Counts/species raw counts.rds")
# add a small pseudocount to avoid any zeros in the df which clr doesn't like
counts <- counts + 1e-10
# perform clr transformation
# make sure this is using the compositions package to perform clr
clr_species <- compositions::clr(counts)
# subset cohorts
PD_s <- clr_species[grep("1N", rownames(clr_species)), ]
Control_s <- clr_species[grep("3N|3G", rownames(clr_species)), ]
IBD_s <- clr_species[grep("2G", rownames(clr_species)), ]
all_cohorts_s <- rbind(PD_s, Control_s, IBD_s)
all_cohorts_s <- as.data.frame(all_cohorts_s)
# create a new data frame with columns for sample ID and cohort
all_cohorts_s <- cbind(
data.frame(Sample_ID = rownames(all_cohorts_s),
cohort = ifelse(grepl("1N", rownames(all_cohorts_s)), "PD",
ifelse(grepl("2G", rownames(all_cohorts_s)), "IBD",
ifelse(grepl("3N|3G", rownames(all_cohorts_s)), "Control", NA)))),
all_cohorts_s
)
# convert data to matrix, ignoring sample and cohort columns
all_cohorts_s2 <- all_cohorts_s[, -(1:2)]
matrix_s <- as.matrix(all_cohorts_s2)
View(matrix_s)
# read in raw counts
counts <- readRDS("UFPF/Metaphlan output/Counts/species raw counts.rds")
# add a small pseudocount to avoid any zeros in the df which clr doesn't like
counts <- counts + 1e-10
# perform clr transformation
# make sure this is using the compositions package to perform clr
clr_species <- compositions::clr(counts)
# subset cohorts
PD_s <- clr_species[grep("1N", rownames(clr_species)), ]
Control_s <- clr_species[grep("3N|3G", rownames(clr_species)), ]
IBD_s <- clr_species[grep("2G", rownames(clr_species)), ]
all_cohorts_s <- rbind(PD_s, Control_s, IBD_s)
all_cohorts_s <- as.data.frame(all_cohorts_s)
View(all_cohorts_s)
View(all_cohorts_s)
# create a new data frame with columns for sample ID and cohort
all_cohorts_s <- cbind(
data.frame(Sample_ID = rownames(all_cohorts_s),
cohort = ifelse(grepl("1N", rownames(all_cohorts_s)), "PD",
ifelse(grepl("2G", rownames(all_cohorts_s)), "IBD",
ifelse(grepl("3N|3G", rownames(all_cohorts_s)), "Control", NA)))),
all_cohorts_s
)
# add in confounders from metadata file
Metadata <- readRDS("UFPF/Metadata.rds")
View(Metadata)
colnames(Metadata)[c(2,6,12:53)] <- gsub("\\.", "_", colnames(Metadata)[c(2,6,12:53)])
# add in confounders from metadata file
Metadata <- readRDS("UFPF/Metadata.rds")
colnames(Metadata)[c(2,6,12:53)] <- gsub("\\.", "_", colnames(Metadata)[c(2,6,12:53)])
# Scaling
Metadata$Reads <- scale(Metadata$Reads)
Metadata$Age <- scale(Metadata$Age)
# pull out predictor variables according to the demographics/metadata table stats
selected_columns <- Metadata %>%
select(Sex, Age, Diagnosis2, Reads, Indigestion_meds, Anti_TNF, Anti_inflammatories__non_NSAID_, Depression_anxiety_meds, Iron_specific_supplement)
library(tidyverse)
library(broom)
library(openxlsx)
# specify response variables
ancom_abundances <- readRDS("UFPF/ANCOMBC2/bias corrected abund genus.rds")
ancom_abundances <- ancom_abundances[, c("Klebsiella", "Faecalimonas")]
# read in metadata to pull out predictor variables
Metadata <- readRDS("UFPF/Metadata.rds")
colnames(Metadata)[c(2,6,12:53)] <- gsub("\\.", "_", colnames(Metadata)[c(2,6,12:53)])
# Scaling
Metadata$Reads <- scale(Metadata$Reads)
Metadata$Age <- scale(Metadata$Age)
# pull out predictor variables according to the demographics/metadata table stats
selected_columns <- Metadata %>%
select(Sex, Age, Diagnosis2, Reads, Indigestion_meds, Anti_TNF, Anti_inflammatories__non_NSAID_, Depression_anxiety_meds, Iron_specific_supplement)
# add in confounders from metadata file
Metadata <- readRDS("UFPF/Metadata.rds")
colnames(Metadata)[c(2,6,12:53)] <- gsub("\\.", "_", colnames(Metadata)[c(2,6,12:53)])
# Scaling
Metadata$Reads <- scale(Metadata$Reads)
Metadata$Age <- scale(Metadata$Age)
Metadata$Age
names(Metadata)
# add in confounders from metadata file
Metadata <- readRDS("UFPF/Metadata.rds")
colnames(Metadata)[c(2,6,12:53)] <- gsub("\\.", "_", colnames(Metadata)[c(2,6,12:53)])
# Scaling
Metadata$Reads <- scale(Metadata$Reads)
# add in confounders from metadata file
Metadata <- readRDS("UFPF/Metadata.rds")
colnames(Metadata)[c(2,6,12:53)] <- gsub("\\.", "_", colnames(Metadata)[c(2,6,12:53)])
# pull out predictor variables according to the demographics/metadata table stats
selected_columns <- Metadata %>%
select(Sex, Age, Diagnosis2, Reads, Indigestion_meds, Anti_TNF, Anti_inflammatories__non_NSAID_, Depression_anxiety_meds, Iron_specific_supplement)
